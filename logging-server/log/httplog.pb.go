// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.1
// source: httplog.proto

package log

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32         `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	UserIP     string        `protobuf:"bytes,2,opt,name=userIP,proto3" json:"userIP,omitempty"`
	ServerHost string        `protobuf:"bytes,3,opt,name=serverHost,proto3" json:"serverHost,omitempty"`
	Date       *HTTPLog_Date `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *HTTPLog) Reset() {
	*x = HTTPLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_httplog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPLog) ProtoMessage() {}

func (x *HTTPLog) ProtoReflect() protoreflect.Message {
	mi := &file_httplog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPLog.ProtoReflect.Descriptor instead.
func (*HTTPLog) Descriptor() ([]byte, []int) {
	return file_httplog_proto_rawDescGZIP(), []int{0}
}

func (x *HTTPLog) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPLog) GetUserIP() string {
	if x != nil {
		return x.UserIP
	}
	return ""
}

func (x *HTTPLog) GetServerHost() string {
	if x != nil {
		return x.ServerHost
	}
	return ""
}

func (x *HTTPLog) GetDate() *HTTPLog_Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type LogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LogRes) Reset() {
	*x = LogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_httplog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRes) ProtoMessage() {}

func (x *LogRes) ProtoReflect() protoreflect.Message {
	mi := &file_httplog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRes.ProtoReflect.Descriptor instead.
func (*LogRes) Descriptor() ([]byte, []int) {
	return file_httplog_proto_rawDescGZIP(), []int{1}
}

func (x *LogRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type HTTPLog_Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day    int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Month  int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Year   int32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Hour   int32 `protobuf:"varint,4,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,5,opt,name=minute,proto3" json:"minute,omitempty"`
	Second int32 `protobuf:"varint,6,opt,name=second,proto3" json:"second,omitempty"`
	Nano   int64 `protobuf:"varint,7,opt,name=nano,proto3" json:"nano,omitempty"`
}

func (x *HTTPLog_Date) Reset() {
	*x = HTTPLog_Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_httplog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPLog_Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPLog_Date) ProtoMessage() {}

func (x *HTTPLog_Date) ProtoReflect() protoreflect.Message {
	mi := &file_httplog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPLog_Date.ProtoReflect.Descriptor instead.
func (*HTTPLog_Date) Descriptor() ([]byte, []int) {
	return file_httplog_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HTTPLog_Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *HTTPLog_Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *HTTPLog_Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *HTTPLog_Date) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *HTTPLog_Date) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *HTTPLog_Date) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *HTTPLog_Date) GetNano() int64 {
	if x != nil {
		return x.Nano
	}
	return 0
}

var File_httplog_proto protoreflect.FileDescriptor

var file_httplog_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa1, 0x02, 0x0a, 0x07, 0x48, 0x54, 0x54, 0x50, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e,
	0x61, 0x6e, 0x6f, 0x22, 0x20, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x25, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x08, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4c, 0x6f,
	0x67, 0x1a, 0x07, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05,
	0x2e, 0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_httplog_proto_rawDescOnce sync.Once
	file_httplog_proto_rawDescData = file_httplog_proto_rawDesc
)

func file_httplog_proto_rawDescGZIP() []byte {
	file_httplog_proto_rawDescOnce.Do(func() {
		file_httplog_proto_rawDescData = protoimpl.X.CompressGZIP(file_httplog_proto_rawDescData)
	})
	return file_httplog_proto_rawDescData
}

var file_httplog_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_httplog_proto_goTypes = []interface{}{
	(*HTTPLog)(nil),      // 0: HTTPLog
	(*LogRes)(nil),       // 1: LogRes
	(*HTTPLog_Date)(nil), // 2: HTTPLog.Date
}
var file_httplog_proto_depIdxs = []int32{
	2, // 0: HTTPLog.date:type_name -> HTTPLog.Date
	0, // 1: Logger.Send:input_type -> HTTPLog
	1, // 2: Logger.Send:output_type -> LogRes
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_httplog_proto_init() }
func file_httplog_proto_init() {
	if File_httplog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_httplog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_httplog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_httplog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPLog_Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_httplog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_httplog_proto_goTypes,
		DependencyIndexes: file_httplog_proto_depIdxs,
		MessageInfos:      file_httplog_proto_msgTypes,
	}.Build()
	File_httplog_proto = out.File
	file_httplog_proto_rawDesc = nil
	file_httplog_proto_goTypes = nil
	file_httplog_proto_depIdxs = nil
}
